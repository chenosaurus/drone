{
  "name": "opencv",
  "description": "Node Bindings to OpenCV",
  "author": {
    "name": "Peter Braden",
    "email": "peterbraden@peterbraden.co.uk"
  },
  "dependencies": {
    "buffers": "0.1.1"
  },
  "version": "0.0.9",
  "devDependencies": {
    "vows": "*"
  },
  "engine": "node >= 0.4.1",
  "scripts": {
    "preinstall": "node-gyp clean rebuild",
    "test": "vows test/unit.js"
  },
  "main": "./lib/opencv",
  "readme": "# node-opencv \n\n[![Build Status](https://secure.travis-ci.org/peterbraden/node-opencv.png)](http://travis-ci.org/peterbraden/node-opencv)\n\n\n[OpenCV](http://opencv.willowgarage.com/wiki/) bindings for Node.js. OpenCV is the defacto computer vision library - by interfacing with it natively in node, we get powerful real time vision in js.\n\nPeople are using node-opencv to fly control quadrocoptors, detect faces from webcam images and annotate video streams. If you're using it for something cool, I'd love to hear about it!\n\n## Install\n\nYou'll need OpenCV 2.3.1 installed.\n\nThen:\n\n\n        npm install opencv\n\n\nOr to build the repo:\n\n\n        node-gyp rebuild\n\n\n## Examples\n\n### Face Detection\n\n\n        cv.readImage(\"./examples/test.jpg\", function(err, im){\n          im.detectObject(\"./data/haarcascade_frontalface_alt.xml\", {}, function(err, faces){\n            for (var i=0;i<faces.length; i++){\n              var x = faces[i]\n              im.ellipse(x.x + x.width/2, x.y + x.height/2, x.width/2, x.height/2);\n            }\n            im.save('./out.jpg');\n          });\n        })\n\n\n\n## API Documentation\n\n### Matrix\n\nThe [matrix](http://opencv.jp/opencv-2svn_org/cpp/core_basic_structures.html#mat) is the most useful\nbase datastructure in OpenCV. Things like images are just matrices of pixels.\n\n#### Creation\n\n        new Matrix(width, height)\n\nOr you can use opencv to read in image files. Supported formats are in the OpenCV docs, but jpgs etc are supported.\n\n        cv.readImage(filename, function(mat){\n          ...\n        })\n\n        cv.readImage(buffer, function(mat){\n          ...\n        })\n\nIf you need to pipe data into an image, you can use an imagestream:\n\n        var s = new cv.ImageStream()\n\n        s.on('load', function(matrix){ \n          ...\n        }) \n\n        fs.createReadStream('./examples/test.jpg').pipe(s);        \n\n#### Accessing Data\n\n        var mat = new cv.Matrix.Eye(4,4); // Create identity matrix\n\n        mat.get(0,0) // 1\n\n        mat.row(0)  // [1,0,0,0]\n        mat.col(4)  // [0,0,0,1]\n\n\n##### Save\n\n        mat.save('./pic.jpg')\n\nor:\n\n        var buff = mat.toBuffer()\n\n\n#### Image Processing\n\n        im.convertGrayscale()\n        im.canny(5, 300)\n        im.houghLinesP()\n\n\n\n#### Simple Drawing\n\n        im.ellipse(x, y)\n        im.line([x1,y1], [x2, y2])\n\n\n#### Object Detection\n\nThere is a shortcut method for \n[Viola-Jones Haar Cascade](http://www.cognotics.com/opencv/servo_2007_series/part_2/sidebar.html) object \ndetection. This can be used for face detection etc.\n\n\n        mat.detectObject(haar_cascade_xml, opts, function(err, matches){})\n\n\nAlso:\n\n        mat.goodFeaturesToTrack\n\n\n#### Contours\n\n        mat.findCountours\n        mat.drawContour\n        mat.drawAllContours\n\n\n## MIT License\nThe library is distributed under the MIT License - if for some reason that \ndoesn't work for you please get in touch.\n\n## Changelog\n\n\n#### 0.0.9\n\n- toBuffer can now take a callback and be run async (re #21)\n",
  "readmeFilename": "README.md",
  "_id": "opencv@0.0.9",
  "_from": "opencv"
}
